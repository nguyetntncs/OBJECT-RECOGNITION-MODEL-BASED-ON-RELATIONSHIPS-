import json
import subprocess
import threading
import re
import tkinter as tk
from tkinter import Entry, filedialog, Label, Button, Canvas
from PIL import Image, ImageTk, ImageDraw
import os
import glob
from sentence_transformers import SentenceTransformer, util

class ObjectDetectionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Object Detection & Relationship")
        self.root.geometry("900x700")
        self.root.configure(bg="#f0f0f0")

        # Ti√™u ƒë·ªÅ
        self.label = tk.Label(root, text="Ch·ªçn ·∫£nh ƒë·ªÉ ph√°t hi·ªán v·∫≠t th·ªÉ", font=("Arial", 14, "bold"), bg="#f0f0f0", fg="#333")
        self.label.pack(pady=10)

        # Frame ch·ª©a c√°c n√∫t ch·ªçn ·∫£nh v√† checkpoint
        frame_top = tk.Frame(root, bg="#f0f0f0")
        frame_top.pack(pady=10)

        self.btn_select = tk.Button(frame_top, text="üìÅ Ch·ªçn ·∫£nh", command=self.select_image, font=("Arial", 12), bg="#007bff", fg="white", width=18)
        self.btn_select.grid(row=0, column=0, padx=10)

        self.btn_checkpoint = tk.Button(frame_top, text="üìÇ Ch·ªçn checkpoint", command=self.select_checkpoint, font=("Arial", 12), bg="#6c757d", fg="white", width=18)
        self.btn_checkpoint.grid(row=0, column=1, padx=10)

        self.btn_run = tk.Button(frame_top, text="‚ñ∂Ô∏è Ch·∫°y nh·∫≠n di·ªán", command=self.run_pipeline_thread, font=("Arial", 12), bg="#28a745", fg="white", width=18)
        self.btn_run.grid(row=0, column=2, padx=10)

        # √î nh·∫≠p truy v·∫•n v√† n√∫t t√¨m ki·∫øm
        frame_search = tk.Frame(root, bg="#f0f0f0")
        frame_search.pack(pady=10)

        self.entry_query = tk.Entry(frame_search, font=("Arial", 12), width=40, fg="#555")
        self.entry_query.insert(0, "Nh·∫≠p truy v·∫•n t√¨m ki·∫øm...")

        # G·∫Øn s·ª± ki·ªán khi click v√†o √¥ nh·∫≠p
        self.entry_query.bind("<FocusIn>", self.clear_placeholder)
        self.entry_query.bind("<FocusOut>", self.restore_placeholder)
        self.entry_query.grid(row=0, column=0, padx=5)

        self.btn_search = tk.Button(frame_search, text="üîç T√¨m v·∫≠t th·ªÉ", command=self.search_object, font=("Arial", 12), bg="#ffc107", fg="black", width=18)
        self.btn_search.grid(row=0, column=1, padx=5)

        # Khung hi·ªÉn th·ªã ·∫£nh
        self.canvas = tk.Canvas(root, width=700, height=450, bg="white", relief="solid", bd=1)
        self.canvas.pack(pady=10)

        # C√°c ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
        self.image_path = None
        self.result_image_path = "result.jpg"
        self.result_json_path = "converted_bboxes.json"
        self.relationship_json_path = "relationships.json"
        self.checkpoint_path = "ckpt/checkpoint.pth"

        # Load model
        self.model = SentenceTransformer("all-MiniLM-L6-v2")

    def clear_placeholder(self, event):
        """ X√≥a ch·ªØ m·∫∑c ƒë·ªãnh khi click v√†o √¥ nh·∫≠p """
        if self.entry_query.get() == "Nh·∫≠p truy v·∫•n t√¨m ki·∫øm...":
            self.entry_query.delete(0, tk.END)
            self.entry_query.config(fg="black")  # Chuy·ªÉn m√†u ch·ªØ v·ªÅ b√¨nh th∆∞·ªùng

    def restore_placeholder(self, event):
        """ N·∫øu √¥ tr·ªëng khi m·∫•t focus, hi·ªÉn th·ªã l·∫°i ch·ªØ m·∫∑c ƒë·ªãnh """
        if not self.entry_query.get():
            self.entry_query.insert(0, "Nh·∫≠p truy v·∫•n t√¨m ki·∫øm...")
            self.entry_query.config(fg="#555")  # M√†u ch·ªØ x√°m nh·∫°t

    def select_image(self):
        file_path = filedialog.askopenfilename(title="Ch·ªçn ·∫£nh", filetypes=[("Image files", "*.jpg *.jpeg *.png")])
        if file_path:
            self.image_path = file_path
            self.display_image(file_path)

    def display_image(self, path):
        image = Image.open(path)
        image = image.resize((600, 400), Image.LANCZOS)
        self.img_tk = ImageTk.PhotoImage(image)
        self.canvas.create_image(300, 200, image=self.img_tk)

    def select_checkpoint(self):
        file_path = filedialog.askopenfilename(title="Ch·ªçn checkpoint", filetypes=[("Checkpoint files", "*.pth")])
        if file_path:
            self.checkpoint_path = file_path
            print(f"üìù Checkpoint ƒë∆∞·ª£c ch·ªçn: {self.checkpoint_path}")

    def search_object(self):
        if not self.image_path:
            self.label.config(text="‚ùå H√£y ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return

        query = self.entry_query.get().strip()
        if not query or query == "Nh·∫≠p truy v·∫•n t√¨m ki·∫øm...":
            self.label.config(text="‚ùå H√£y nh·∫≠p c√¢u truy v·∫•n!")
            return

        try:
            with open(self.result_json_path, "r") as f:
                data = json.load(f)
            
            if isinstance(data, list):
                data = data[0]

            objects = data.get("objects", [])
            if not objects:
                self.label.config(text="‚ùå Kh√¥ng c√≥ object n√†o trong JSON!")
                return

            object_names = [obj.get("class", "") for obj in objects]
            query_lower = query.lower()

            # T√¨m object c√≥ trong c√¢u truy v·∫•n (∆∞u ti√™n v·ªã tr√≠ s·ªõm nh·∫•t)
            best_match_name = None
            best_pos = len(query_lower) + 1  # Gi√° tr·ªã r·∫•t l·ªõn

            for obj_name in object_names:
                pos = query_lower.find(obj_name.lower())
                if 0 <= pos < best_pos:
                    best_pos = pos
                    best_match_name = obj_name

            if not best_match_name:
                self.label.config(text="‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t th·ªÉ n√†o tr√πng trong truy v·∫•n!")
                return

            self.label.config(text=f"‚úÖ ƒê√£ t√¨m th·∫•y v·∫≠t th·ªÉ: {best_match_name}")
            print(f"üîç V·∫≠t th·ªÉ kh·ªõp v·ªõi truy v·∫•n: {best_match_name}")
            self.draw_relationship_boxes(best_match_name, None)

        except json.JSONDecodeError:
            self.label.config(text="‚ùå L·ªói: Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file JSON!")
        except Exception as e:
            self.label.config(text=f"‚ùå L·ªói chi ti·∫øt: {e}")


    def draw_relationship_boxes(self, subject_name, object_name):
        try:
            with open(self.result_json_path, "r") as f:
                data = json.load(f)

            print("‚úÖ JSON data loaded:", data)

            if isinstance(data, list):
                data = data[0]

            objects = data.get("objects", [])

            print("üîç Danh s√°ch objects:", [obj.get("class", "") for obj in objects])
            print("üîç Subject c·∫ßn t√¨m:", subject_name, "| Object c·∫ßn t√¨m:", object_name)

            # T√¨m subject
            subject_box = next(
                (obj for obj in objects if obj.get("class", "").lower() == subject_name.lower()), None
            )

            # T√¨m object n·∫øu c√≥
            object_box = None
            if object_name:
                object_box = next(
                    (obj for obj in objects if obj.get("class", "").lower() == object_name.lower()), None
                )

            if not subject_box:
                self.label.config(text=f"‚ùå Kh√¥ng t√¨m th·∫•y subject: {subject_name} trong JSON!")
                print("‚ùå L·ªói t√¨m subject:", subject_name)
                return

            if object_name and not object_box:
                self.label.config(text=f"‚ùå Kh√¥ng t√¨m th·∫•y object: {object_name} trong JSON!")
                print("‚ùå L·ªói t√¨m object:", object_name)
                return

            image = Image.open(self.image_path)
            draw = ImageDraw.Draw(image)

            # V·∫Ω subject
            sx, sy, sw, sh = subject_box["bbox"]
            draw.rectangle([sx, sy, sw, sh], outline="red", width=3)
            draw.text((sx, sy - 10), subject_name, fill="red")

            # V·∫Ω object n·∫øu c√≥
            if object_box:
                ox, oy, ow, oh = object_box["bbox"]
                draw.rectangle([ox, oy, ow, oh], outline="blue", width=3)
                draw.text((ox, oy - 10), object_name, fill="blue")

            result_path = "relationship_result.jpg"
            image.save(result_path)
            self.display_image(result_path)

            self.label.config(text="‚úÖ ƒê√£ v·∫Ω xong box!")

        except Exception as e:
            self.label.config(text=f"‚ùå L·ªói khi v·∫Ω box: {e}")
            print(f"‚ùå L·ªói khi v·∫Ω box: {e}")

    def run_pipeline_thread(self):
        thread = threading.Thread(target=self.run_pipeline)
        thread.start()

    def run_pipeline(self):
        if not self.image_path:
            self.label.config(text="‚ùå H√£y ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return

        self.label.config(text="‚è≥ ƒêang x·ª≠ l√Ω... Vui l√≤ng ch·ªù.")

        try:
            # 1Ô∏è‚É£ Ch·∫°y detect_objects.py
            self.label.config(text="üîç ƒêang ph√°t hi·ªán v·∫≠t th·ªÉ...")
            detect_thread = threading.Thread(target=subprocess.run, args=(["python", "detect_objects.py", self.image_path],))
            detect_thread.start()
            detect_thread.join()  # ƒê·ª£i detect_objects.py ch·∫°y xong

            # 2Ô∏è‚É£ Ch·∫°y convert_yolo_to_reltr.py (sau khi detect_objects.py ho√†n t·∫•t)
            self.label.config(text="üîÑ ƒêang chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu YOLO...")
            convert_thread = threading.Thread(target=subprocess.run, args=(["python", "convert_yolo_to_reltr.py", "result.json"],))
            convert_thread.start()
            convert_thread.join()  # ƒê·ª£i convert_yolo_to_reltr.py ch·∫°y xong

            # 3Ô∏è‚É£ Ch·∫°y boundingbox_objects.py (sau khi convert_yolo_to_reltr.py ho√†n t·∫•t)
            self.label.config(text="üîó ƒêang x√°c ƒë·ªãnh m·ªëi quan h·ªá gi·ªØa c√°c v·∫≠t th·ªÉ...")
            boundingbox_thread = threading.Thread(target=subprocess.run, args=(["python", "boundingbox_objects.py", "--yolo_json", self.result_json_path,"--img_path",self.image_path,"--device","cpu", "--resume", self.checkpoint_path],))
            boundingbox_thread.start()
            boundingbox_thread.join()  # ƒê·ª£i boundingbox_objects.py ch·∫°y xong

            image_dir = os.path.dirname(self.image_path)
            image_id = os.path.splitext(os.path.basename(self.image_path))[0]

            # ‚úÖ T√¨m ·∫£nh output_anh2.jpg ·ªü b·∫•t k·ª≥ th∆∞ m·ª•c n√†o
            output_images = glob.glob(f"**/output_{image_id}.jpg", recursive=True)

            if output_images:
                latest_result = max(output_images, key=os.path.getmtime)  # L·∫•y ·∫£nh m·ªõi nh·∫•t n·∫øu c√≥ nhi·ªÅu ·∫£nh tr√πng t√™n
                self.display_image(latest_result)
                self.label.config(text="‚úÖ Ho√†n t·∫•t! ƒê√¢y l√† k·∫øt qu·∫£.")
            else:
                print("üìÇ Danh s√°ch file trong th∆∞ m·ª•c:", os.listdir(image_dir))  # Debug ki·ªÉm tra
                self.label.config(text="‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh k·∫øt qu·∫£!")
        except Exception as e:
            self.label.config(text=f"‚ùå L·ªói: {e}")
            print(f"‚ùå L·ªói x·∫£y ra: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ObjectDetectionApp(root)
    root.mainloop()
